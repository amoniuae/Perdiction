import React, { useState } from 'react';

const CodeBlock: React.FC<{ code: string }> = ({ code }) => {
  const [copied, setCopied] = useState(false);

  const handleCopy = () => {
    navigator.clipboard.writeText(code).then(() => {
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    });
  };

  return (
    <div className="bg-slate-900 rounded-lg relative font-mono text-xs sm:text-sm">
      <button
        onClick={handleCopy}
        className="absolute top-2 right-2 bg-slate-700 hover:bg-slate-600 text-slate-300 px-2 py-1 rounded text-xs transition-colors z-10"
        aria-label="Copy SQL code"
      >
        {copied ? 'Copied!' : 'Copy'}
      </button>
      <pre className="p-4 pt-8 overflow-x-auto text-slate-300">
        <code>{code}</code>
      </pre>
    </div>
  );
};

export const DatabaseSetupNeededOverlay: React.FC = () => {
  const combinedSQL = `-- Combined SQL setup script for AI Sports Predictor
-- This script creates all necessary tables and sets up security.
-- It is safe to run this script multiple times.

-- ========== tracked_predictions table ==========
CREATE TABLE IF NOT EXISTS public.tracked_predictions (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id TEXT NOT NULL,
  prediction_id TEXT NOT NULL,
  prediction_data JSONB NOT NULL,
  virtual_stake NUMERIC NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
ALTER TABLE public.tracked_predictions ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public anonymous access for predictions" ON public.tracked_predictions;
CREATE POLICY "Public anonymous access for predictions" ON public.tracked_predictions FOR ALL USING (true) WITH CHECK (true);
CREATE INDEX IF NOT EXISTS idx_tracked_predictions_user_id ON public.tracked_predictions(user_id);
-- The UNIQUE constraint will be added only if it doesn't exist.
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_constraint 
    WHERE conname = 'tracked_predictions_user_id_prediction_id_key' AND conrelid = 'public.tracked_predictions'::regclass
  ) THEN
    ALTER TABLE public.tracked_predictions ADD CONSTRAINT tracked_predictions_user_id_prediction_id_key UNIQUE (user_id, prediction_id);
  END IF;
END;
$$;

-- ========== tracked_accumulators table ==========
CREATE TABLE IF NOT EXISTS public.tracked_accumulators (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id TEXT NOT NULL,
  accumulator_id TEXT NOT NULL,
  accumulator_data JSONB NOT NULL,
  virtual_stake NUMERIC NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);
ALTER TABLE public.tracked_accumulators ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public anonymous access for accumulators" ON public.tracked_accumulators;
CREATE POLICY "Public anonymous access for accumulators" ON public.tracked_accumulators FOR ALL USING (true) WITH CHECK (true);
CREATE INDEX IF NOT EXISTS idx_tracked_accumulators_user_id ON public.tracked_accumulators(user_id);
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_constraint 
    WHERE conname = 'tracked_accumulators_user_id_accumulator_id_key' AND conrelid = 'public.tracked_accumulators'::regclass
  ) THEN
    ALTER TABLE public.tracked_accumulators ADD CONSTRAINT tracked_accumulators_user_id_accumulator_id_key UNIQUE (user_id, accumulator_id);
  END IF;
END;
$$;

-- ========== ai_strategies table (CRUCIAL FOR AI LEARNING) ==========
CREATE TABLE IF NOT EXISTS public.ai_strategies (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  user_id TEXT NOT NULL,
  name TEXT NOT NULL,
  parameters JSONB NOT NULL,
  tip_id TEXT,
  tip_data JSONB,
  outcome TEXT,
  pnl NUMERIC DEFAULT 0 NOT NULL,
  wins INTEGER DEFAULT 0 NOT NULL,
  losses INTEGER DEFAULT 0 NOT NULL,
  is_archived BOOLEAN DEFAULT false NOT NULL,
  is_promoted BOOLEAN DEFAULT false NOT NULL
);
ALTER TABLE public.ai_strategies ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS "Public anonymous access for strategies" ON public.ai_strategies;
CREATE POLICY "Public anonymous access for strategies" ON public.ai_strategies FOR ALL USING (true) WITH CHECK (true);
CREATE INDEX IF NOT EXISTS idx_ai_strategies_user_id ON public.ai_strategies(user_id);
CREATE INDEX IF NOT EXISTS idx_ai_strategies_is_promoted ON public.ai_strategies(is_promoted);

SELECT 'Setup script completed successfully!' as status;`;

  return (
    <div className="bg-slate-900 text-white min-h-screen flex flex-col items-center justify-center p-4 sm:p-8">
      <div className="w-full max-w-4xl bg-slate-800 p-6 sm:p-8 rounded-lg border border-red-500/50 shadow-2xl shadow-red-500/20">
        <div className="text-center">
            <svg xmlns="http://www.w3.org/2000/svg" className="mx-auto h-16 w-16 text-red-400 mb-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="1.5">
                <path strokeLinecap="round" strokeLinejoin="round" d="M4 7v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2H6c-1.1 0-2 .9-2 2z" />
                <ellipse cx="12" cy="7" rx="8" ry="2" />
                <path strokeLinecap="round" strokeLinejoin="round" d="M12 11v2m0 4h.01" />
            </svg>
            <h1 className="text-2xl sm:text-3xl font-extrabold text-red-400 mb-4">Database Setup Required</h1>
            <p className="text-base sm:text-lg text-slate-300 mb-6">
              The app is connected to Supabase, but the necessary database tables are missing or incomplete. Please follow the steps below to set up your database correctly.
            </p>
        </div>

        <div className="text-left space-y-6">
            <div>
                <h2 className="text-lg font-semibold text-white mb-2 flex items-center gap-3"><span className="bg-brand-primary text-white rounded-full h-8 w-8 inline-flex items-center justify-center text-sm font-bold">1</span>Open the Supabase SQL Editor</h2>
                <p className="text-slate-400 ml-11">In your Supabase project dashboard, navigate to the <a href="https://supabase.com/dashboard" target="_blank" rel="noopener noreferrer" className="text-brand-primary underline hover:text-brand-primary-hover">SQL Editor</a> section.</p>
            </div>
            
             <div>
                <h2 className="text-lg font-semibold text-white mb-2 flex items-center gap-3"><span className="bg-brand-primary text-white rounded-full h-8 w-8 inline-flex items-center justify-center text-sm font-bold">2</span>Run the Setup Script</h2>
                <p className="text-slate-400 mb-3 ml-11">Copy the entire SQL script below. Paste it into the SQL Editor and click <strong className="text-white">"RUN"</strong>. This single script creates and configures all required tables.</p>
                <div className="ml-11">
                  <CodeBlock code={combinedSQL} />
                </div>
            </div>

            <div>
                <h2 className="text-lg font-semibold text-white mb-2 flex items-center gap-3"><span className="bg-brand-primary text-white rounded-full h-8 w-8 inline-flex items-center justify-center text-sm font-bold">3</span>Refresh the Application</h2>
                <p className="text-slate-400 ml-11">Once the script has finished running successfully in Supabase, return to this page and click the refresh button below.</p>
            </div>

            <div className="text-slate-400 mt-8 pt-6 border-t border-slate-700 text-center text-sm">
              <button onClick={() => window.location.reload()} className="bg-brand-primary text-white font-bold py-3 px-8 rounded-lg hover:bg-brand-primary-hover transition-colors text-base">
                Refresh Page
              </button>
            </div>
        </div>
      </div>
    </div>
  );
};
